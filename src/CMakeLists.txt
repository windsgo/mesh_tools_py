find_package(Boost COMPONENTS numpy python)
if (${Boost_FOUND})
    message(STATUS Boost_VERSION:${Boost_VERSION})
    message(STATUS "Boost_INCLUDE_DIRS:${Boost_INCLUDE_DIRS}")
    message(STATUS "Boost_LIBRARIES:${Boost_LIBRARIES}")
else()
    message(STATUS "Need Boost::numpy Boost::python but not found, mesh_slicer py lib will not be built")
endif()

find_package(Python COMPONENTS Development)
if (${Python_FOUND})
    message(STATUS Python_VERSION:${Python_VERSION})
    message(STATUS Python_INCLUDE_DIRS:${Python_INCLUDE_DIRS})
    message(STATUS Python_LIBRARIES:${Python_LIBRARIES})
else()
    message(STATUS "Need Python::Development but not found, mesh_slicer py lib will not be built")
endif()

if (${Python_FOUND} AND ${Boost_FOUND})
    add_compile_definitions(ENABLE_BOOST_PYTHON)
endif()

if (Python_VERSION VERSION_GREATER 3.0)
    message(STATUS ${Python_VERSION})
endif()

if (Python_VERSION VERSION_LESS 3.0)
    message(WARNING "${Python_VERSION}, using Python2, recommended to use Python3")
endif()

# find_package(Python3 COMPONENTS Development)
# if (${Python3_FOUND})
#     message(STATUS Python3_VERSION:${Python3_VERSION})
#     message(STATUS Python3_INCLUDE_DIRS:${Python3_INCLUDE_DIRS})
#     message(STATUS Python3_LIBRARIES:${Python3_LIBRARIES})
# else()
#     message(ERROR "Need Python3::Development but not found, mesh_slicer lib will not be built")
# endif()

add_library(mesh_slicer SHARED "mesh_slicer.cpp")
target_link_libraries(mesh_slicer PUBLIC CGAL::CGAL Boost::python Boost::numpy Python::Python)
if (fmt_FOUND)
    target_link_libraries(mesh_slicer PUBLIC fmt::fmt-header-only)
endif(fmt_FOUND)
